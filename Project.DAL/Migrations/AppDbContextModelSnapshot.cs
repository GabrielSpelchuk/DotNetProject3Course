// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Project.DAL;

#nullable disable

namespace Project.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Project.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("categories", "catalog_db");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Gadgets"
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("customers", "orders_db");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreatedAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "alice@mail.com",
                            Name = "Alice Johnson"
                        },
                        new
                        {
                            CustomerId = 2,
                            CreatedAt = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "bob@mail.com",
                            Name = "Bob Williams"
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("orders", "orders_db");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CreatedAt = new DateTime(2024, 10, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 1,
                            Status = "Completed",
                            SupplierId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            CreatedAt = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = 2,
                            Status = "Pending",
                            SupplierId = 2
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items", "orders_db");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 999.99m
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 199.00m
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 5,
                            UnitPrice = 49.50m
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("payments", "orders_db");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            Amount = 1397.99m,
                            OrderId = 1,
                            PaidAt = new DateTime(2024, 10, 17, 10, 30, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("products", "catalog_db");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Name = "Laptop X1",
                            Price = 999.99m,
                            StockQuantity = 10,
                            SupplierId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            Name = "EF Core Guide",
                            Price = 49.50m,
                            StockQuantity = 50,
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            Name = "Smartwatch Z",
                            Price = 199.00m,
                            StockQuantity = 25,
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("product_categories", "catalog_db");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.ProductDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ReturnPolicy")
                        .HasColumnType("text");

                    b.Property<string>("ShippingTime")
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.ToTable("product_details", "catalog_db");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Powerful laptop for development.",
                            ReturnPolicy = "30 days",
                            ShippingTime = "2-3 Days"
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Complete guide to Entity Framework Core.",
                            ReturnPolicy = "15 days",
                            ShippingTime = "1-2 Days"
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Smartwatch with health monitoring.",
                            ReturnPolicy = "30 days",
                            ShippingTime = "2-3 Days"
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_images", "catalog_db");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ProductId = 1,
                            Url = "/img/laptop-x1.jpg"
                        },
                        new
                        {
                            ImageId = 2,
                            ProductId = 1,
                            Url = "/img/laptop-x1-side.jpg"
                        },
                        new
                        {
                            ImageId = 3,
                            ProductId = 3,
                            Url = "/img/smartwatch-z.jpg"
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.HasKey("SupplierId");

                    b.ToTable("suppliers", "catalog_db");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Country = "USA",
                            Name = "Tech Global",
                            Rating = 4.5m
                        },
                        new
                        {
                            SupplierId = 2,
                            Country = "UK",
                            Name = "Book World",
                            Rating = 4.8m
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.Order", b =>
                {
                    b.HasOne("Project.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Project.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Project.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Project.Domain.Entities.Order", "Order")
                        .WithOne()
                        .HasForeignKey("Project.Domain.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project.Domain.Entities.Product", b =>
                {
                    b.HasOne("Project.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Project.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("Project.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Domain.Entities.ProductDetail", b =>
                {
                    b.HasOne("Project.Domain.Entities.Product", "Product")
                        .WithOne("Detail")
                        .HasForeignKey("Project.Domain.Entities.ProductDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("Project.Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Project.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Project.Domain.Entities.Product", b =>
                {
                    b.Navigation("Detail");

                    b.Navigation("Images");

                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
